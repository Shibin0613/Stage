@page "/"
@inject IJSRuntime JSRuntime


<body>
    <h1>Upload jouw bestand hieronder</h1>
    <p>(Je kan PDF bestanden laten omzetten naar XML bestand)</p>

    <div class="uploadfile" id="uploadDropzone">
        <label for="fileInput">
            <img src="images/uploadImage.png" class="img" />
            <div>
                <label for="customPath">Vul een pad in:</label>
                <input type="text" id="customPath" @bind="customFilePath" />
                <button @onclick="OpenDirectoryDialog">Selecteer map</button>
            </div>
            <InputFile id="fileInput" class="inputButton" OnChange="UploadFile" accept="application/pdf" multiple />
        </label>
    </div>

    @if (isLoading)
    {
        <p>Uploaden...</p>
    }
    @if (loadingFinish)
    {
        <p>Upload klaar!</p>
    }
    <script>
        window.initializeDragAndDrop = () => {
            const dropzone = document.getElementById('uploadDropzone');

            dropzone.addEventListener('dragover', (event) => {
                event.preventDefault();
                dropzone.classList.add('dragover');
            });

            dropzone.addEventListener('dragleave', () => {
                dropzone.classList.remove('dragover');
            });

            dropzone.addEventListener('drop', (event) => {
                event.preventDefault();
                dropzone.classList.remove('dragover');

                const files = event.dataTransfer.files;

                const inputFiles = document.querySelector('input[type="file"]');
                inputFiles.files = files;
                inputFiles.dispatchEvent(new Event('change'));
            });
        };

        // Click event for the image
        const img = dropzone.querySelector('img');
        img.addEventListener('click', () => {
            const fileInput = document.getElementById('fileInput');
            fileInput.click(); // Trigger click event on file input
        });
    </script>
</body>

@code {
    private bool isLoading;
    private bool loadingFinish;
    private int maxAllowedFiles = 10;
    private string customFilePath;
    private string defaultFilePath = "C:\\Windows";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeDragAndDrop");
        }
    }

    protected override void OnInitialized()
    {
        customFilePath = MyConfig.FilePath;
        if (Directory.Exists(customFilePath))
        {
            customFilePath = MyConfig.FilePath;
        }
        else
        {
            customFilePath = defaultFilePath;
        }
    }

    private async Task OpenDirectoryDialog()
    {
        string directoryPath = MyConfig.FilePath;
        if (Directory.Exists(customFilePath))
        {
            directoryPath = MyConfig.GetDirectory(customFilePath);
        }
        else
        {
            directoryPath = MyConfig.GetDirectory("C:\\Windows");
        }

        if (!string.IsNullOrEmpty(directoryPath))
        {
            customFilePath = directoryPath;
            MyConfig.FilePath = directoryPath;
        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {   
        isLoading = true;
        await Task.Delay(600);

        string filePath = customFilePath;

        //Bestanden die niet worden geaccepteerd worden uiteindelijk laten zien
        StringBuilder fileNotAccepted = new StringBuilder();

        //Bestanden die wel worden geaccepteerd
        StringBuilder fileIsAccepted = new StringBuilder();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            //Bestandengegevens uit te halen voor later
            string fileName = System.IO.Path.GetFileName(file.Name);
            string fileExtension = System.IO.Path.GetExtension(file.Name);
            string destinationPath = System.IO.Path.Combine(filePath, fileName);

            if (fileExtension.ToLower() == ".pdf") 
            {
                fileIsAccepted.Append(fileName);

                using (var memoryStream = new MemoryStream())
                {
                    int j = 10;
                    await file.OpenReadStream().CopyToAsync(memoryStream);
                    memoryStream.Seek(0, SeekOrigin.Begin);

                    //Uitlezen van de gegevens vanuit PDF
                    StringBuilder text = new StringBuilder();
                    StringBuilder order = new StringBuilder();

                    pdfDefinition def = null;
                    xmlOrder xmlOrder = new xmlOrder();

                    using (PdfReader reader = new PdfReader(memoryStream))
                    {
                        HashSet<string> uniqueTags = new HashSet<string>();
                        HashSet<string> uniqueArtikel = new HashSet<string>();

                        for (int i = 1; i <= reader.NumberOfPages; i++)
                        {
                            ITextExtractionStrategy strategy = new SimpleTextExtractionStrategy();

                            //Definieren alle text van PDF
                            string currentText = PdfTextExtractor.GetTextFromPage(reader, i, strategy);

                            MyConfig.InitConfig();

                            def = MyConfig.GetDefinition(currentText);

                            if (def != null)
                            {
                                text.Append(currentText);

                                foreach (var defObject in def.defObjects)
                                {
                                    var value = defObject.GetValue(reader, currentText, i, defObject, j);

                                    if (defObject.XmlNiveau == XmlNiveau.Order)
                                    {
                                        if (!uniqueTags.Contains(defObject.TagNaam) && !string.IsNullOrEmpty(defObject.Value))
                                        {
                                            uniqueTags.Add(defObject.TagNaam);
                                            xmlOrder.Items.Add(defObject);
                                        }
                                    }
                                    else
                                    {
                                        if (defObject.Value != null)
                                        {
                                            string[] EachOrder = defObject.Value.Split("Order", StringSplitOptions.RemoveEmptyEntries);
                                            xmlArtikel artikel = new xmlArtikel();

                                            foreach (string EachOrderString in EachOrder)
                                            {
                                                if (!uniqueArtikel.Contains(EachOrderString) && !string.IsNullOrEmpty(EachOrderString))
                                                {
                                                    uniqueArtikel.Add(EachOrderString);
                                                    var newDefObject = new defObject(); // Maak een nieuwe instantie van defObject

                                                    newDefObject.OrderTags = defObject.OrderTags; //Voeg een tagnaam toe voor later

                                                    newDefObject.Value = EachOrderString; // Wijs de waarde toe aan de nieuwe instantie
                                                    artikel.Artikelen.Add(newDefObject);

                                                }
                                                // bepaal of het een nieuw artikel moet worden of niet
                                                j += 10;
                                            }
                                            xmlOrder.Artikelen.Add(artikel);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (def == null)
                    {

                        // Verwijder het bestand uit de lijst van geaccepteerde bestanden
                        fileNotAccepted.Append(fileName);
                        fileIsAccepted.Replace(fileName, "");

                        memoryStream.Close();
                    }
                    else
                    {
                        //overzetten als XML-bestand
                        var xmlFileExtension = System.IO.Path.ChangeExtension(fileName, ".xml");

                        string xmlFilePath = filePath + "\\" + xmlFileExtension; // Het pad naar het XML-bestand

                        // Schrijf de geëxtraheerde tekst naar een XML-bestand
                        using (XmlWriter writer = XmlWriter.Create(xmlFilePath))
                        {
                            writer.WriteStartDocument();

                            writer.WriteStartElement("Order");

                            //Huidige PDF text
                            writer.WriteStartElement("Huidige_PDFtext");
                            writer.WriteString(text.ToString());
                            writer.WriteEndElement();
                            //
                            writer.WriteStartElement("stamgegevens");
                            xmlOrder.Items.ForEach(o => WriteXmlTag(writer, o));
                            writer.WriteEndElement();

                            //def.GetObjectsFromNiveau(XmlNiveau.Order).ForEach(o => WriteXmlTag(writer, o));

                            writer.WriteStartElement("Artikelen");

                            xmlOrder.Artikelen.ForEach(a =>
                            {
                                a.Artikelen.ForEach(o => WriteXmlTagArtikel(writer, o));
                            });
                            writer.WriteEndElement();
                        }

                        memoryStream.Close();
                    }
                }
            }
            else
            {
                fileNotAccepted.Append(fileName);
            }
        }
        //Show message
        if (fileIsAccepted.Length != 0)
        {
            MessageBox.Show(fileIsAccepted.Replace(".pdf", ".pdf ").Replace(".PDF", ".PDF ") + "is/zijn wel geaccepteerd en omgezet naar XML bestanden");
        }
        if(fileNotAccepted.Length != 0)
        {
            MessageBox.Show(fileNotAccepted.Replace(".pdf", ".pdf ").Replace(".PDF", ".PDF ") + " is/zijn niet geaccpteerd, upload een geldig PDF bestand!");
        }

        isLoading = false;
        loadingFinish = true;
    }

    private void WriteXmlTag(XmlWriter writer, defObject o)
    {
        if (o.Value != null)
        {
            o.ToString().Split(" ");
            writer.WriteStartElement(o.TagNaam);
            writer.WriteString(o.Value); // Schrijf de geëxtraheerde tekst
            writer.WriteEndElement();
        }
    }

    private void WriteXmlTagArtikel(XmlWriter writer, defObject o)
    {
        if (o.Value != null)
        {
            writer.WriteStartElement("Artikel");
            string orderLine = o.Value.Replace("\n", " ");
            int i = 0;

            var referentieIndex = orderLine.Split(" ")[1];

            string[] item = new string[o.OrderTags.Count()];

            item[0] = orderLine.Split(" ")[0];

            item[o.OrderTags.Count() - 5] = orderLine.Split(" ").Reverse().Take(5).Last();
            item[o.OrderTags.Count() - 4] = orderLine.Split(" ").Reverse().Take(4).Last();
            item[o.OrderTags.Count() - 3] = orderLine.Split(" ").Reverse().Take(3).Last();
            item[o.OrderTags.Count() - 2] = orderLine.Split(" ").Reverse().Take(2).Last();
            item[o.OrderTags.Count() - 1] = orderLine.Split(" ").Last().Trim();

            foreach (var Ordertagnaam in o.OrderTags)
            {
                string tagNaam = Ordertagnaam.TagNaam;
                writer.WriteStartElement(tagNaam);

                if (Regex.IsMatch(referentieIndex, @"\d"))
                {
                    //Zo ja, dan is die de referentie
                    item[1] = referentieIndex;
                    item[2] = orderLine.Split(" ")[2];
                }
                else
                {
                    int referentieFrom = orderLine.IndexOf(" ");
                    int referentieTo = orderLine.IndexOf(" ", referentieFrom + 1); // Zoek vanaf het karakter na het eerste spatie-teken
                    int derdeSpaceIndex = orderLine.IndexOf(" ", referentieTo + 1); // Zoek vanaf het karakter na de tweede spatie-teken

                    item[1] = orderLine.Substring(referentieFrom + 1, derdeSpaceIndex - referentieFrom - 1).Trim();
                    item[2] = orderLine.Split(" ")[3];
                }
                int materiaalOmschrijvingFrom = orderLine.IndexOf(item[2]) + item[2].Length;
                int materiaalOmschrijvingTo = orderLine.IndexOf(item[o.OrderTags.Count() - 5]);
                item[3] = orderLine.Substring(materiaalOmschrijvingFrom, materiaalOmschrijvingTo - materiaalOmschrijvingFrom).Trim();

                writer.WriteString(item[i]);
                writer.WriteEndElement();
                i++;

            }
            writer.WriteEndElement();
        }
    }
}